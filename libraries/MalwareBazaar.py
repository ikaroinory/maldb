import sqlite3

import requests
from tqdm import tqdm

from libraries.utils import SampleDownloader


class MalwareBazaar(SampleDownloader):
    def __init__(
        self,
        api: str,
        db_path: str,
        download_path: str
    ) -> None:
        SampleDownloader.__init__(self, download_path)
        self.api = api
        self.db_path = db_path

    def download_by_sha256(self, sha256: str) -> None:
        payload = {'query': 'get_file', 'sha256_hash': sha256}
        response = requests.post(self.api, data=payload, allow_redirects=True)

        with open(f'{self.download_path}/{sha256}.zip', 'wb') as file:
            file.write(response.content)

    def download(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'select sha256 from malware_info where sha256 not in (select sha256 from download_info) and source = (?)',
                ('MalwareBazaar',))
            sha256_list = cursor.fetchall()
            sha256_list = [sha256[0] for sha256 in sha256_list]

            for sha256 in tqdm(sha256_list):
                self.download_by_sha256(sha256)
                cursor.execute(
                    f'insert into download_info values (?, datetime(?, ?), ?, ?)',
                    (sha256, 'now', 'localtime', self.download_path, 'MalwareBazaar')
                )

            cursor.close()

        print(f'{len(sha256_list)} malware from MalwareBazaar downloaded successfully.')

    def scan(self, payload: dict):
        response = requests.post(self.api, data=payload)

        data = response.json()
        if data['query_status'] != 'ok':
            print(data['query_status'])
            return

        malware_info_list = data['data']
        db_item_list = [(item['sha256_hash'], 'MalwareBazaar') for item in malware_info_list]

        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            old_count = cursor.execute('select count(*) from malware_info').fetchone()[0]
            cursor.executemany('insert or ignore into malware_info(sha256, source) values (?, ?)', db_item_list)
            new_count = cursor.execute('select count(*) from malware_info').fetchone()[0]
            cursor.close()

        print(f'{new_count - old_count} new entries from MalwareBazaar added.')

    def scan_by_tag(self, tag: str, limit: int = 1000):
        self.scan({'query': 'get_taginfo', 'tag': tag, 'limit': limit})

    def scan_by_type(self, file_type: str, limit: int = 1000):
        self.scan({'query': 'get_file_type', 'file_type': file_type, 'limit': limit})
